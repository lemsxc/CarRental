<div x-cloak x-show="rentModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50"
    x-on:keydown.escape.window="rentModal = false">
    <div class="bg-white p-6 rounded-lg w-full max-w-md">
        <h2 class="text-xl font-bold mb-4">Car Details</h2>

        <div>
            <!-- Car Image -->
            <img id="car_image" x-bind:src="carDetails.image" alt="Car Image"
                class="w-full h-40 object-cover rounded-md mb-4" />

            <!-- Car Details -->
            <p class="font-semibold hidden">ID: <span id="car_id" x-text="carDetails.id"></span></p>
            <p class="text-gray-700 font-semibold mb-1">
                üöó Car Name: <span id="car_name" x-text="carDetails.brand + ' ' + carDetails.model"></span>
            </p>
            <p class="text-gray-600 mb-1">
                ‚öôÔ∏è Transmission: <span id="car_transmission" x-text="carDetails.transmission"></span>
            </p>
            <p class="text-gray-600 mb-1">
                ‚õΩ Fuel Type: <span id="car_fuel" x-text="carDetails.fuel_type"></span>
            </p>
            <p class="text-gray-600 mb-1">
                üõ£Ô∏è Mileage: <span id="car_mileage" x-text="carDetails.mileage"></span>
            </p>

            <!-- Price Info -->
            <div class="mt-3">
                <p class="text-green-600 font-bold">
                    üí≤ Base Price: $<span id="base_price" x-text="carDetails.rent_price"></span> / day
                </p>
                <p id="driver_fee_display" class="text-yellow-600 font-medium hidden">
                    ‚ûï Driver Fee: $<span id="driver_fee_value">30</span> / day
                </p>
                <p class="text-blue-600 font-bold">
                    üßæ Total: $<span id="car_price" x-text="carDetails.rent_price"></span> / day
                </p>
            </div>

            <!-- Reservation Dates -->
            <div class="grid grid-cols-2 gap-4 mt-4">
                <div>
                    <label for="start_date" class="text-sm text-gray-700 font-medium">Start Date</label>
                    <input type="date" id="start_date" class="w-full p-2 border rounded-md" required />
                </div>
                <div>
                    <label for="end_date" class="text-sm text-gray-700 font-medium">End Date</label>
                    <input type="date" id="end_date" class="w-full p-2 border rounded-md" required />
                </div>
            </div>

            <!-- Need Driver? -->
            <div class="mt-4">
                <label class="flex items-center space-x-2">
                    <input type="checkbox" id="need_driver" class="w-4 h-4 text-blue-500">
                    <span class="text-gray-700 font-medium">Need a Driver?</span>
                </label>
            </div>

            <!-- Driver Dropdown -->
            <div id="driverSelection" class="mt-3 hidden">
                <label for="driver_list" class="block text-sm font-medium text-gray-700">Select a Driver</label>
                <select id="driver_list" class="w-full p-2 border rounded-md mt-2">
                    <option value="" selected disabled>Loading drivers...</option>
                </select>
            </div>  

            <!-- Buttons -->
            <button id="checkoutButton"
                class="bg-green-600 text-white px-4 py-2 rounded-lg mt-5 w-full font-semibold flex items-center justify-center gap-2">
                <i class="ph ph-credit-card text-xl"></i> Pay with Stripe
            </button>
            <button x-on:click="rentModal = false"
                class="bg-gray-400 text-white px-4 py-2 rounded-lg mt-2 w-full flex items-center justify-center gap-2">
                <i class="ph ph-x-circle text-xl"></i> Cancel
            </button>
        </div>
    </div>
</div>

<script>
    const DRIVER_FEE = 30;
    let basePrice = 0;

    document.addEventListener("DOMContentLoaded", () => {
        document.getElementById("checkoutButton").addEventListener("click", checkout);
        document.getElementById("need_driver").addEventListener("change", handleDriverToggle);
        document.getElementById("driver_list").addEventListener("change", handleDriverSelected);

        // Capture base price once when rentModal opens
        const basePriceObserver = new MutationObserver(() => {
            const raw = parseFloat(document.getElementById("base_price").textContent);
            basePrice = isNaN(raw) ? 0 : raw;
            updatePrice();
        });
        basePriceObserver.observe(document.getElementById("base_price"), { childList: true });
    });

    function handleDriverToggle() {
        const needDriver = document.getElementById("need_driver").checked;
        const driverSelection = document.getElementById("driverSelection");
        document.getElementById("driver_fee_display").classList.add("hidden");

        if (needDriver) {
            driverSelection.classList.remove("hidden");
            fetchDrivers();
        } else {
            driverSelection.classList.add("hidden");
            document.getElementById("driver_list").value = '';
            updatePrice();
        }
    }

    function handleDriverSelected() {
        const driverId = document.getElementById("driver_list").value;
        const feeDisplay = document.getElementById("driver_fee_display");

        if (driverId) {
            feeDisplay.classList.remove("hidden");
        } else {
            feeDisplay.classList.add("hidden");
        }

        updatePrice();
    }

    function updatePrice() {
        const needDriver = document.getElementById("need_driver").checked;
        const driverSelected = !!document.getElementById("driver_list").value;
        const finalPrice = (needDriver && driverSelected) ? basePrice + DRIVER_FEE : basePrice;

        document.getElementById("car_price").textContent = finalPrice.toFixed(2);
    }

    async function fetchDrivers() {
        const driverDropdown = document.getElementById("driver_list");
        driverDropdown.innerHTML = "<option selected disabled>Loading drivers...</option>";

        try {
            const response = await fetch("/api/drivers");
            const drivers = await response.json();

            driverDropdown.innerHTML = "<option value='' disabled selected>Select a Driver</option>";
            drivers.forEach(driver => {
                driverDropdown.innerHTML += `<option value="${driver.driverId}">${driver.name}</option>`;
            });
        } catch (error) {
            driverDropdown.innerHTML = "<option disabled>Error loading drivers</option>";
            console.error("Failed to fetch drivers:", error);
        }
    }

    async function checkout() {
        const carId = document.getElementById("car_id").textContent;
        const carName = document.getElementById("car_name").textContent;
        const carImage = document.getElementById("car_image").src;
        const startDate = document.getElementById("start_date").value;
        const endDate = document.getElementById("end_date").value;
        const needDriver = document.getElementById("need_driver").checked;
        const driverId = needDriver ? document.getElementById("driver_list").value : null;

        if (!startDate || !endDate) {
            alert("Please select both start and end dates.");
            return;
        }

        const finalPrice = parseFloat(document.getElementById("car_price").textContent);

        const response = await fetch("/Payment/CreateCheckoutSession", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                carId, carName, carImage,
                carPrice: finalPrice,
                startDate, endDate, needDriver, driverId
            })
        });

        const session = await response.json();
        window.location.href = session.url;
    }
</script>
